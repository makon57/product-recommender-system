{{- if .Values.modelRegistry.enabled }}
{{- $modelRegistryExists := (lookup "modelregistry.opendatahub.io/v1alpha1" "ModelRegistry" .Values.modelRegistry.namespace .Values.modelRegistry.name) }}
{{- if not $modelRegistryExists }}
apiVersion: modelregistry.opendatahub.io/v1alpha1
kind: ModelRegistry
metadata:
  name: {{ .Values.modelRegistry.name }}
  namespace: {{ .Values.modelRegistry.namespace }}
  labels:
    app.kubernetes.io/created-by: model-registry-operator
    app.kubernetes.io/instance: {{ .Values.modelRegistry.name }}
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: modelregistry
    app.kubernetes.io/part-of: model-registry-operator
spec:
  grpc:
    port: {{ .Values.modelRegistry.spec.grpc.port }}
  istio:
    gateway:
      grpc:
        gatewayRoute: {{ .Values.modelRegistry.spec.istio.gateway.grpc.gatewayRoute }}
        port: {{ .Values.modelRegistry.spec.istio.gateway.grpc.port }}
        tls:
          mode: {{ .Values.modelRegistry.spec.istio.gateway.grpc.tls.mode }}
      rest:
        gatewayRoute: {{ .Values.modelRegistry.spec.istio.gateway.rest.gatewayRoute }}
        port: {{ .Values.modelRegistry.spec.istio.gateway.rest.port }}
        tls:
          mode: {{ .Values.modelRegistry.spec.istio.gateway.rest.tls.mode }}
    tlsMode: {{ .Values.modelRegistry.spec.istio.tlsMode }}
  mysql:
    database: {{ .Values.modelRegistry.spec.mysql.database }}
    host: {{ .Values.modelRegistry.spec.mysql.host }}
    passwordSecret:
      key: {{ .Values.modelRegistry.spec.mysql.passwordSecret.key }}
      name: {{ .Values.modelRegistry.spec.mysql.passwordSecret.name }}
    port: {{ .Values.modelRegistry.spec.mysql.port }}
    skipDBCreation: {{ .Values.modelRegistry.spec.mysql.skipDBCreation }}
    username: {{ .Values.modelRegistry.spec.mysql.username }}
  rest:
    port: {{ .Values.modelRegistry.spec.rest.port }}
    serviceRoute: {{ .Values.modelRegistry.spec.rest.serviceRoute }}
{{- end }}
{{- end }}
---
{{- if .Values.modelRegistry.enabled }}
{{- $secretExists := (lookup "v1" "Secret" .Values.modelRegistry.namespace "model-registry-db") }}
{{- if not $secretExists }}
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: model-registry-db
    app.kubernetes.io/instance: model-registry-db
    app.kubernetes.io/part-of: model-registry-db
    app.kubernetes.io/managed-by: Helm
  annotations:
    template.openshift.io/expose-database_name: '{.data[''database-name'']}'
    template.openshift.io/expose-password: '{.data[''database-password'']}'
    template.openshift.io/expose-username: '{.data[''database-user'']}'
  name: model-registry-db
  namespace: {{ .Values.modelRegistry.namespace }}
stringData:
  database-name: "{{ .Values.modelRegistry.database.credentials.databaseName }}"
  database-password: "{{ .Values.modelRegistry.database.credentials.databasePassword }}"
  database-user: "{{ .Values.modelRegistry.database.credentials.databaseUser }}"
{{- end }}
{{- end }}
---
{{- if .Values.modelRegistry.enabled }}
{{- $serviceExists := (lookup "v1" "Service" .Values.modelRegistry.namespace "model-registry-db") }}
{{- if not $serviceExists }}
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: model-registry-db
    app.kubernetes.io/instance: model-registry-db
    app.kubernetes.io/part-of: model-registry-db
    app.kubernetes.io/managed-by: Helm
  annotations:
    template.openshift.io/expose-uri: mysql://{.spec.clusterIP}:{.spec.ports[?(.name==\mysql\)].port}
  name: model-registry-db
  namespace: {{ .Values.modelRegistry.namespace }}
spec:
  ports:
  - name: mysql
    nodePort: 0
    port: {{ .Values.modelRegistry.database.service.port }}
    protocol: TCP
    appProtocol: tcp
    targetPort: {{ .Values.modelRegistry.database.service.targetPort }}
  selector:
    name: model-registry-db
  sessionAffinity: None
  type: {{ .Values.modelRegistry.database.service.type }}
{{- end }}
{{- end }}
---
{{- if .Values.modelRegistry.enabled }}
{{- $pvcExists := (lookup "v1" "PersistentVolumeClaim" .Values.modelRegistry.namespace "model-registry-db") }}
{{- if not $pvcExists }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/name: model-registry-db
    app.kubernetes.io/instance: model-registry-db
    app.kubernetes.io/part-of: model-registry-db
    app.kubernetes.io/managed-by: Helm
  name: model-registry-db
  namespace: {{ .Values.modelRegistry.namespace }}
spec:
  accessModes:
  {{- range .Values.modelRegistry.database.storage.accessModes }}
  - {{ . }}
  {{- end }}
  resources:
    requests:
      storage: {{ .Values.modelRegistry.database.storage.storageSize }}
{{- end }}
{{- end }}
---
{{- if .Values.modelRegistry.enabled }}
{{- $deploymentExists := (lookup "apps/v1" "Deployment" .Values.modelRegistry.namespace "model-registry-db") }}
{{- if not $deploymentExists }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: model-registry-db
    app.kubernetes.io/instance: model-registry-db
    app.kubernetes.io/part-of: model-registry-db
    app.kubernetes.io/managed-by: Helm
  annotations:
    template.alpha.openshift.io/wait-for-ready: "true"
  name: model-registry-db
  namespace: {{ .Values.modelRegistry.namespace }}
spec:
  replicas: {{ .Values.modelRegistry.database.deployment.replicas }}
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      name: model-registry-db
  strategy:
    type: {{ .Values.modelRegistry.database.deployment.strategy.type }}
  template:
    metadata:
      labels:
        name: model-registry-db
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - env:
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: model-registry-db
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: model-registry-db
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: model-registry-db
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              key: database-name
              name: model-registry-db
        args:
          - --datadir
          - {{ .Values.modelRegistry.database.deployment.mysql.datadir }}
          - --default-authentication-plugin={{ .Values.modelRegistry.database.deployment.mysql.authPlugin }}
        image: {{ .Values.modelRegistry.database.deployment.image }}
        imagePullPolicy: {{ .Values.modelRegistry.database.deployment.imagePullPolicy }}
        livenessProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - mysqladmin -u${MYSQL_USER} -p${MYSQL_ROOT_PASSWORD} ping
          initialDelaySeconds: {{ .Values.modelRegistry.database.deployment.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.modelRegistry.database.deployment.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.modelRegistry.database.deployment.livenessProbe.timeoutSeconds }}
        name: mysql
        ports:
        - containerPort: {{ .Values.modelRegistry.database.service.port }}
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - mysql -D ${MYSQL_DATABASE} -u${MYSQL_USER} -p${MYSQL_ROOT_PASSWORD} -e 'SELECT 1'
          initialDelaySeconds: {{ .Values.modelRegistry.database.deployment.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.modelRegistry.database.deployment.readinessProbe.timeoutSeconds }}
        securityContext:
          capabilities: {}
          privileged: false
        terminationMessagePath: /dev/termination-log
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: model-registry-db-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: model-registry-db-data
        persistentVolumeClaim:
          claimName: model-registry-db
{{- end }}
{{- end }}
---
{{- if .Values.modelRegistry.enabled }}
{{- $serviceAccountExists := (lookup "v1" "ServiceAccount" .Release.Namespace "modelregistry-sa") }}
{{- if not $serviceAccountExists }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: modelregistry-sa
{{- end }}
{{- end }}
---
{{- if .Values.modelRegistry.enabled }}
{{- $roleBindingExists := (lookup "rbac.authorization.k8s.io/v1" "RoleBinding" .Values.modelRegistry.namespace "modelregistry-rolebinding") }}
{{- if not $roleBindingExists }}
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: modelregistry-rolebinding
  namespace: {{ .Values.modelRegistry.namespace }}
subjects:
  - kind: ServiceAccount
    name: modelregistry-sa
    namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ .Values.modelRegistry.accessrole }}
{{- end }}
{{- end }}
---
{{- if .Values.modelRegistry.enabled }}
{{- $jobExists := (lookup "batch/v1" "Job" .Values.modelRegistry.namespace "model-registry-creator") }}
{{- if not $jobExists }}
apiVersion: batch/v1
kind: Job
metadata:
  name: model-registry-creator
spec:
  template:
    metadata:
      labels:
        app: model-registry-creator
    spec:
      restartPolicy: Never
      serviceAccountName: modelregistry-sa
      initContainers:
        - name: wait-until-model-registry-created
          image: registry.redhat.io/openshift4/ose-cli:latest
          command:
            - /bin/bash
            - -c
            - |
              echo "Waiting for service '$SVC' in namespace '$NAMESPACE'..."
              until oc get svc "$SVC" -n "$NAMESPACE" -o jsonpath='{.spec.clusterIP}' ; do
                echo "Service not ready yet..."
                sleep 2
              done
              echo "Service is ready!"
          env:
            - name: SVC
              value: {{ .Values.modelRegistry.name }}
            - name: NAMESPACE
              value: {{ .Values.modelRegistry.namespace }}
      containers:
      - name: model-registry-creator
        image: {{ .Values.modelRegistryCreatorImage}}
        env:
        {{- if .Values.minio.env }}
        {{- toYaml .Values.minio.env | nindent 8 }}
        {{- end }}
        {{- if .Values.backend.additionalEnv }}
        {{- toYaml .Values.backend.additionalEnv | nindent 8 }}
        {{- end }}
        - name: MODEL_REGISTRY_NAME
          value: item-encoder
        - name: STORAGE_KEY
          value: minio
        - name: MODEL_REGISTRY_BUCKET
          value: user-encoder
        - name: MODEL_PATH
          value: item-encoder.pth
        - name: MODEL_FORMAT_NAME
          value: pytorch
        - name: MODEL_FORMAT_VERSION
          value: 2.6.0
        - name: MODEL_REGISTRY_NAMESPACE
          value: {{ .Values.modelRegistry.namespace }}
        - name: MODEL_REGISTRY_CONTAINER
          value: {{ .Values.modelRegistry.name }}
        - name: REGION
          value: us-east-1
        command:
        - python
        - -c
        - |
          import os, subprocess
          from model_registry import ModelRegistry, utils
          from sqlalchemy import text, create_engine

          mr_namespace = os.environ.get("MODEL_REGISTRY_NAMESPACE")
          mr_container = os.environ.get("MODEL_REGISTRY_CONTAINER")

          cmd = f"oc get svc -n {mr_namespace} -o json {mr_container} | jq '.metadata.annotations.\"routing.opendatahub.io/external-address-rest\"'"
          host_output = subprocess.run(cmd, shell=True, capture_output=True, text=True, check=True).stdout.strip()
          host = f"https://{host_output[1:-5]}" # Remove quotes and :443

          author = subprocess.run("oc whoami", shell=True, capture_output=True, text=True, check=True).stdout.strip()
          user_token = subprocess.run("oc whoami -t", shell=True, capture_output=True, text=True, check=True).stdout.strip()
          registry = ModelRegistry(host, author=author, user_token=user_token)
          model_endpoint= f"http://{os.environ.get('MINIO_HOST')}:{os.environ.get('MINIO_PORT')}"

          database_url = os.getenv('DATABASE_URL')
          print(f"Database URL: {database_url}")
          engine = create_engine(database_url)

          with engine.connect() as connection:
              result = connection.execute(text("SELECT version FROM model_version ORDER BY updated_at DESC LIMIT 1"))
              version = result.fetchone()[0]
              print(f"Latest version from database: {version}")

          registry.register_model(
                      name=os.environ.get("MODEL_REGISTRY_NAME"),
                      uri=utils.s3_uri_from(endpoint=model_endpoint, bucket=os.environ.get("MODEL_REGISTRY_BUCKET"), path=os.environ.get("MODEL_PATH"), region=os.environ.get("REGION")),
                      version=version,
                      model_format_name=os.environ.get("MODEL_FORMAT_NAME"),
                      model_format_version=os.environ.get("MODEL_FORMAT_VERSION"),
                      storage_key= os.environ.get("STORAGE_KEY"),
                  )
{{- end }}
{{- end }}